# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-pus
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX
list(APPEND pus_sources
    Helpers/Message.cc
    Service.cc
    Time/UTCTimestamp.cc
    Time/Time.cc
    Time/TimeGetter.cc
    Time/TimeProvider.cc
    Helpers/MessageParser.cc
    Helpers/ErrorHandler.cc
    Helpers/CRCHelper.cc
    Helpers/Statistic.cc     
    Helpers/EventAction.cc 
    Helpers/PMONBase.cc 
    Helpers/FunctionPool.cc
    Helpers/AllMessageTypes.cc    
    Helpers/ParameterPool.cc
    Helpers/PacketStore.cc
    Helpers/MemoryManager.cc
    Helpers/SequenceStore.cc
    Helpers/FilepathValidators.cc   
    Helpers/Filesystem.cc 
    ServicesPool_impl.cc
    TestService_impl.cc
    RequestVerificationService_impl.cc
    HousekeepingService_impl.cc
    ParameterStatisticsService_impl.cc
    EventReportService_impl.cc
    MemoryManagementService_impl.cc
    FunctionManagementService_impl.cc
    TimeBasedSchedulingService_impl.cc
    OnBoardMonitoringService_impl.cc
    LargePacketTransferService_impl.cc
    RealTimeForwardingControlService_impl.cc
    StorageAndRetrievalService_impl.cc
    EventActionService_impl.cc
    ParameterService_impl.cc
    TimeConfig_impl.cc
    MessageConfig_impl.cc
    ParametersInit_impl.cc
    EventsInit_impl.cc
    setParameter_impl.cc
    LargeMessageDetector_impl.cc
    FunctionInit_impl.cc
    RequestSequencingService_impl.cc
    FileManagementService_impl.cc
    pdu_vector_source_impl.cc
)

set(pus_sources "${pus_sources}" PARENT_SCOPE)
if(NOT pus_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT pus_sources)

add_library(gnuradio-pus SHARED ${pus_sources})
target_link_libraries(gnuradio-pus gnuradio::gnuradio-runtime
    nlohmann_json::nlohmann_json
#    etl::etl
    )
target_include_directories(gnuradio-pus
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
  )
set_target_properties(gnuradio-pus PROPERTIES DEFINE_SYMBOL "gnuradio_pus_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-pus PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-pus)

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

# If your unit tests require special include paths, add them here
#include_directories()
# List all files that contain Boost.UTF unit tests here
list(APPEND test_pus_sources
)
# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-pus)

if(NOT test_pus_sources)
    MESSAGE(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_pus_sources)

foreach(qa_file ${test_pus_sources})
    GR_ADD_CPP_TEST("pus_${qa_file}"
        ${CMAKE_CURRENT_SOURCE_DIR}/${qa_file}
    )
endforeach(qa_file)
